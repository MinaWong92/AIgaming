from web3 import Web3

# Connect to a local Ethereum node (change the provider URL as needed)
w3 = Web3(Web3.HTTPProvider('http://localhost:8545'))

# Check connection status
if w3.isConnected():
    print("Connected to Ethereum node")

# Set the contract address and ABI
contract_address = "0x123456789..."
contract_abi = [
    {
        "constant": False,
        "inputs": [
            {"name": "_name", "type": "string"},
            {"name": "_age", "type": "uint256"}
        ],
        "name": "addPerson",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": True,
        "inputs": [{"name": "", "type": "uint256"}],
        "name": "people",
        "outputs": [
            {"name": "name", "type": "string"},
            {"name": "age", "type": "uint256"}
        ],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    },
    {
        "constant": True,
        "inputs": [],
        "name": "peopleCount",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    }
]

# Create a contract instance
contract = w3.eth.contract(address=contract_address, abi=contract_abi)

# Get the total number of people stored in the contract
people_count = contract.functions.peopleCount().call()
print("Total People Count:", people_count)

# Add a new person to the contract
name = "John Doe"
age = 30

# Send the transaction to add a person
txn_hash = contract.functions.addPerson(name, age).transact()

# Wait for the transaction to be mined
w3.eth.waitForTransactionReceipt(txn_hash)

# Retrieve the details of the newly added person
latest_person_index = people_count
latest_person = contract.functions.people(latest_person_index).call()

latest_person_name = latest_person[0]
latest_person_age = latest_person[1]

print("Latest Person:")
print("Name:", latest_person_name)
print("Age:", latest_person_age)
